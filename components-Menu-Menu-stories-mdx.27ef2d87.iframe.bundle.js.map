{"version":3,"file":"components-Menu-Menu-stories-mdx.27ef2d87.iframe.bundle.js","mappings":";;AA4BA;;;;ACHA;;AAKA;;AAIA;;;;AAIA;;;;;;AAMA;;;;AAIA;;;AAGA;AAGA;;AAiBA;;AAMA;;;AAIA;;AAEA;AACA;;AAGA;;AAEA;AACA;;AAGA;;AAEA;;;AAIA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;;;AAOA;;;;;;AAMA;;;;;AAQA;;;;;AAKA;;;AASA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAUA;;AAUA;;AAGA;;AAGA;;AAMA;;;ACjNA;AACA;AACA;AACA;AAGA","sources":["webpack://@lokalise/louis/./src/components/Menu/MenuList/MenuDrawer.tsx","webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts"],"sourcesContent":["import { css, modifier, styled } from '@lokalise/styled';\n\nimport { color, radius, spacing, zIndex } from '../../../utils/theme';\n\nexport type MenuDrawerProps = {\n\t/**\n\t * Toggles full width rendering of the MenuDrawer.\n\t */\n\tfullWidth?: boolean;\n};\n\nexport const MenuDrawer = styled.div<MenuDrawerProps>`\n\tbackground-color: ${color('background.primary')};\n\tpadding: ${spacing(1, 0)};\n\twidth: 100%;\n\tborder-radius: ${radius('md')};\n\tborder: 1px solid ${color('border.primary')};\n\tbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n\tz-index: ${zIndex('popover')};\n\n\t${modifier(\n\t\t'fullWidth',\n\t\tcss`\n\t\t\twidth: 100%;\n\t\t`,\n\t)}\n`;\n\nMenuDrawer.displayName = 'MenuDrawer';\n","import { css, type CssDeclaration, modifier, styled, variants } from '@lokalise/styled';\n\nimport { LoadingSignIcon } from '../../foundations/icons';\nimport { inputHeight, smallInputHeight } from '../../utils/styles';\nimport { spacing, value } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\n\nexport type Size = 'xs' | 'sm' | 'md' | 'lg';\nexport type Appearance = 'accent' | 'danger' | 'warning';\nexport type Variant = 'primary' | 'secondary' | 'tertiary';\n\ntype ButtonProps = {\n\tsize: Size;\n\tvariant: Variant;\n\tappearance: Appearance;\n\tactive: boolean;\n\tdisabled: boolean;\n\tisLoading: boolean;\n};\n\nconst isDisabledModifier = (style: CssDeclaration<ButtonProps>) =>\n\tmodifier(\n\t\t({ isLoading }: ButtonProps) => !isLoading,\n\t\tcss`\n\t\t\t&:disabled {\n\t\t\t\t${style}\n\t\t\t}\n\t\t`,\n\t);\n\nexport const defineAppearance = (\n\tinput: Record<'idle' | 'hover' | 'active' | 'disabled', CssDeclaration<ButtonProps>>,\n) => css<ButtonProps>`\n\t// Idle\n\t${input.idle};\n\n\t// Hover\n\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t${input.hover};\n\t}\n\n\t// Pressed\n\t&:active:not([disabled]):not([aria-expanded='true']),\n\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t${input.active};\n\t}\n\n\t// Activated\n\t${modifier('active', input.active)};\n\n\t// Disabled\n\t${isDisabledModifier(input.disabled)}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n\tdisplay: inline-flex;\n\talign-items: center;\n\tbackground-color: transparent;\n\tborder: 1px solid transparent;\n\ttext-decoration: none;\n\tvertical-align: middle;\n\tborder-radius: ${value('radius.m')};\n\tcursor: pointer;\n\tposition: relative;\n\ttransition: all ${value('transition.default')};\n\tbox-sizing: border-box;\n\tfont-family: ${value('font.family.graphik')};\n\n\t${isDisabledModifier(\n\t\tcss`\n\t\t\tcursor: not-allowed;\n\t\t`,\n\t)};\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tfont-size: 11px;\n\t\t\tpadding: ${spacing(0, 2)};\n\t\t\theight: 20px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tsm: css`\n\t\t\tfont-size: 12px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${smallInputHeight}px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tmd: css`\n\t\t\tfont-size: 14px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${inputHeight}px;\n\t\t\tline-height: 14px;\n\t\t`,\n\t\tlg: css`\n\t\t\tfont-size: 18px;\n\t\t\tpadding: ${spacing(0, 4)};\n\t\t\theight: 45px;\n\t\t\tline-height: 18px;\n\t\t`,\n\t})}\n\n\t${variants('appearance', {\n\t\taccent: defineAppearance({\n\t\t\tidle: css`\n\t\t\t\t--button-appearance-primary-color: ${value('color.background.action.primary.default')};\n\t\t\t\t--button-appearance-secondary-color: ${value('color.text.action.primary')};\n\t\t\t`,\n\t\t\thover: css`\n\t\t\t\t--button-appearance-primary-color: ${value('color.background.action.primary.hover')};\n\t\t\t`,\n\t\t\tactive: css`\n\t\t\t\t--button-appearance-primary-color: ${value('color.background.action.primary.hover')};\n\t\t\t`,\n\t\t\tdisabled: css`\n\t\t\t\t--button-appearance-secondary-color: ${value('color.text.disabled')};\n\t\t\t\t--button-appearance-primary-color: ${value('color.background.disabled')};\n\t\t\t\t--button-appearance-tertiary-color: ${value('color.border.disabled')};\n\t\t\t\t--button-appearance-quaternary-color: ${value('color.background.surface.middle')};\n\t\t\t`,\n\t\t}),\n\t\tdanger: defineAppearance({\n\t\t\tidle: css`\n\t\t\t\t--button-appearance-primary-color: ${value('color.background.action.danger.default')};\n\t\t\t\t--button-appearance-secondary-color: ${value('color.text.action.danger')};\n\t\t\t`,\n\t\t\thover: css`\n\t\t\t\t--button-appearance-primary-color: ${value('color.background.action.danger.hover')};\n\t\t\t`,\n\t\t\tactive: css`\n\t\t\t\t--button-appearance-primary-color: ${value('color.background.action.danger.hover')};\n\t\t\t`,\n\t\t\tdisabled: css`\n\t\t\t\t--button-appearance-secondary-color: ${value('color.text.disabled')};\n\t\t\t\t--button-appearance-primary-color: ${value('color.background.disabled')};\n\t\t\t\t--button-appearance-tertiary-color: ${value('color.border.disabled')};\n\t\t\t\t--button-appearance-quaternary-color: ${value('color.background.surface.middle')};\n\t\t\t`,\n\t\t}),\n\t\twarning: defineAppearance({\n\t\t\tidle: css`\n\t\t\t\t--button-appearance-primary-color: ${value('color.deprecated.interactive.yellow.idle')};\n\t\t\t\t--button-appearance-secondary-color: ${value('color.deprecated.content.buttonText2')};\n\t\t\t`,\n\t\t\thover: css`\n\t\t\t\t--button-appearance-primary-color: ${value('color.deprecated.interactive.yellow.hover')};\n\t\t\t`,\n\t\t\tactive: css`\n\t\t\t\t--button-appearance-primary-color: ${value('color.deprecated.interactive.yellow.pressed')};\n\t\t\t`,\n\t\t\tdisabled: css`\n\t\t\t\t--button-appearance-secondary-color: ${value('color.text.disabled')};\n\t\t\t\t--button-appearance-primary-color: ${value('color.background.disabled')};\n\t\t\t\t--button-appearance-tertiary-color: ${value('color.border.disabled')};\n\t\t\t\t--button-appearance-quaternary-color: ${value('color.background.surface.middle')};\n\t\t\t`,\n\t\t}),\n\t})};\n\n\t${variants('variant', {\n\t\tprimary: css<ButtonProps>`\n\t\t\tbackground-color: var(--button-appearance-primary-color);\n\t\t\tcolor: var(--button-appearance-secondary-color);\n\t\t`,\n\t\tsecondary: css<ButtonProps>`\n\t\t\tbackground-color: transparent;\n\t\t\tborder-width: 1px;\n\t\t\tborder-color: var(--button-appearance-primary-color);\n\t\t\tcolor: var(--button-appearance-primary-color);\n\n\t\t\t${isDisabledModifier(\n\t\t\t\tcss`\n\t\t\t\t\tcolor: var(--button-appearance-secondary-color);\n\t\t\t\t\tborder: 1px solid var(--button-appearance-tertiary-color);\n\t\t\t\t\tbackground-color: var(--button-appearance-quaternary-color);\n\t\t\t\t`,\n\t\t\t)}\n\t\t`,\n\t\ttertiary: css<ButtonProps>`\n\t\t\tbackground-color: transparent;\n\t\t\tborder-color: transparent;\n\t\t\tcolor: var(--button-appearance-primary-color);\n\n\t\t\t${isDisabledModifier(\n\t\t\t\tcss`\n\t\t\t\t\tcolor: var(--button-appearance-secondary-color);\n\t\t\t\t`,\n\t\t\t)}\n\t\t`,\n\t})};\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n\tdisplay: flex;\n\tflex-flow: row nowrap;\n\talign-items: center;\n\tjustify-content: center;\n\twidth: 100%;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tgap: ${spacing(1)};\n\t\t`,\n\t\tsm: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tmd: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tlg: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t})}\n\n\t${modifier(\n\t\t'isHidden',\n\t\tcss`\n\t\t\topacity: 0;\n\t\t`,\n\t)}\n`;\n\nexport const Text = styled.span<{ size: Size }>`\n\tposition: relative;\n\talign-items: center;\n\tdisplay: inline-flex;\n\twhite-space: nowrap;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tsm: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tmd: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tlg: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t})}\n`;\n\nexport const StyledLoadingSign = styled(LoadingSignIcon)`\n\tfont-size: 1.3em;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n","import { css, excludeProps, styled, type StyledProps } from '@lokalise/styled';\n\nimport { color } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n\tcolor?: SvgIconColor;\n\tfill?: SvgIconColor;\n\tstroke?: SvgIconColor;\n\tsize?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n\tcolor: 'inherit',\n\tfill: 'currentColor',\n\tstroke: undefined,\n};\n\nconst colorHelper = (\n\tcolorType: keyof typeof colorTypesDefaults,\n\tinputColor: SvgIconColor | undefined,\n\tprops: StyledProps<unknown>,\n) =>\n\tinputColor && !reservedKeywords.includes(inputColor)\n\t\t? color(inputColor as NamedColor)(props)\n\t\t: colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n\tpointer-events: all;\n\tbox-sizing: border-box;\n\tcolor: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n\tfill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n\tstroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n\tfont-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n\twidth: 1em;\n\theight: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n"],"names":[],"sourceRoot":""}