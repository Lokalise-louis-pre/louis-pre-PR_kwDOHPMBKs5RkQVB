{"version":3,"file":"components-TopBanner-TopBanner-stories-mdx.224ae220.iframe.bundle.js","mappings":";;AAuBA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AC3BA;;;AAIA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;;AAOA;;;AAqBA;;;;ACzIA;AACA;AACA;AACA;AAGA","sources":["webpack://@lokalise/louis/./src/components/TopBanner/styles.ts","webpack://@lokalise/louis/./src/components/IconButton/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts"],"sourcesContent":["import { css, modifier, styled, variants } from '@lokalise/styled';\n\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\nimport type { PressableProps } from '../Pressable';\nimport { Pressable } from '../Pressable';\nimport type { Alignment, Status } from './TopBanner';\n\ntype ContainerProps = {\n\tstyleStatus: Status;\n\talignItems: Alignment;\n};\n\nexport const Container = styled.div<ContainerProps>`\n\tfont-family: ${fontFamily('default')};\n\tpadding: ${spacing(4)};\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto;\n\tcolumn-gap: ${spacing(3)};\n\talign-items: flex-start;\n\t${modifier(\n\t\t({ alignItems }: ContainerProps) => alignItems === 'center',\n\t\tcss`\n\t\t\talign-items: center;\n\t\t`,\n\t)};\n\t${variants('styleStatus', {\n\t\tsuccess: css`\n\t\t\tbackground-color: ${color('surface.green100')};\n\t\t`,\n\t\terror: css`\n\t\t\tbackground-color: ${color('surface.red100')};\n\t\t`,\n\t\twarning: css`\n\t\t\tbackground-color: ${color('surface.yellow100')};\n\t\t`,\n\t\tinfo: css`\n\t\t\tbackground-color: ${color('surface.primary100')};\n\t\t`,\n\t})};\n`;\n\nexport const Content = styled.div`\n\t${typography('description')};\n\tcolor: ${color('content.primary')};\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tflex-wrap: wrap;\n\tcolumn-gap: ${spacing(1)};\n`;\n\nexport const TopBannerLink = styled(Pressable)<PressableProps>`\n\t${typography('description')}\n\tcolor: ${color('content.primary')};\n\ttext-decoration: underline;\n\tmin-width: fit-content;\n\tborder: none;\n\tbackground: none;\n\n\t&:hover,\n\t&:visited,\n\t&:link,\n\t&:active,\n\t&:active:hover {\n\t\ttext-decoration: underline;\n\t\tcolor: ${color('content.primary')};\n\t}\n`;\n\nTopBannerLink.displayName = 'TopBannerLink';\n","import { css, modifier, styled, variants } from '@lokalise/styled';\n\nimport { spacing, value } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance } from './IconButton';\n\ntype IconButtonProps = {\n\tappearance: Appearance;\n\tactive?: boolean;\n\tdisabled?: boolean;\n\tisLoading: boolean;\n};\n\nconst variantColorStyles = css`\n\t${variants('appearance', {\n\t\tprimary: css`\n\t\t\tpadding: 6px;\n\t\t\tfont-size: 20px;\n\t\t\tcolor: ${value('color.text.default')};\n\n\t\t\t// hover\n\t\t\t&:hover:not([disabled]) {\n\t\t\t\tbackground-color: ${value('palette.blue.100')};\n\t\t\t\tcolor: ${value('color.background.action.primary.hover')};\n\t\t\t}\n\n\t\t\t// pressed\n\t\t\t&:active:not([disabled]),\n\t\t\t&:focus:active:not([disabled]) {\n\t\t\t\tbackground-color: ${value('color.background.action.primary.hover')};\n\t\t\t\tcolor: ${value('color.text.inverse')};\n\t\t\t}\n\n\t\t\t// focus\n\t\t\t&:focus-visible:not([disabled]) {\n\t\t\t\tbackground-color: ${value('palette.blue.100')};\n\t\t\t\tcolor: ${value('color.background.action.primary.hover')};\n\t\t\t}\n\n\t\t\t// activated\n\t\t\t${modifier(\n\t\t\t\t'active',\n\t\t\t\tcss`\n\t\t\t\t\tbackground-color: ${value('palette.neutral.100')};\n\t\t\t\t\tcolor: ${value('color.background.action.primary.hover')};\n\t\t\t\t`,\n\t\t\t)}\n\t\t`,\n\t\tsecondary: css`\n\t\t\tpadding: ${spacing(1)};\n\t\t\tfont-size: 16px;\n\t\t\tcolor: ${value('color.text.default')};\n\n\t\t\t// hover\n\t\t\t&:hover:not([disabled]) {\n\t\t\t\tbackground-color: ${value('color.border.light')};\n\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t}\n\n\t\t\t// pressed\n\t\t\t&:active:not([disabled]),\n\t\t\t&:focus:active:not([disabled]) {\n\t\t\t\tbackground-color: ${value('color.border.default')};\n\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t}\n\n\t\t\t// focus\n\t\t\t&:focus-visible:not([disabled]) {\n\t\t\t\tbackground-color: ${value('color.border.light')};\n\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t}\n\n\t\t\t// activated\n\t\t\t${modifier(\n\t\t\t\t'active',\n\t\t\t\tcss`\n\t\t\t\t\tbackground-color: ${value('color.background.surface.middle')};\n\t\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t\t`,\n\t\t\t)}\n\t\t`,\n\t\tverified: css`\n\t\t\tpadding: ${spacing(1)};\n\t\t\tfont-size: 16px;\n\t\t\tcolor: ${value('color.text.default')};\n\n\t\t\t// hover\n\t\t\t&:hover:not([disabled]) {\n\t\t\t\tbackground-color: ${value('color.deprecated.surface.yellow100')};\n\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t}\n\n\t\t\t// pressed\n\t\t\t&:active:not([disabled]),\n\t\t\t&:focus:active:not([disabled]) {\n\t\t\t\tbackground-color: ${value('color.deprecated.yellow.200')};\n\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t}\n\n\t\t\t// focus\n\t\t\t&:focus-visible:not([disabled]) {\n\t\t\t\tbackground-color: ${value('color.deprecated.surface.yellow100')};\n\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t}\n\n\t\t\t// activated\n\t\t\t${modifier(\n\t\t\t\t'active',\n\t\t\t\tcss`\n\t\t\t\t\tbackground-color: ${value('color.deprecated.surface.yellow50')};\n\t\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t\t`,\n\t\t\t)}\n\t\t`,\n\t\treviewed: css`\n\t\t\tpadding: ${spacing(1)};\n\t\t\tfont-size: 16px;\n\t\t\tcolor: ${value('color.text.default')};\n\n\t\t\t// hover\n\t\t\t&:hover:not([disabled]) {\n\t\t\t\tbackground-color: ${value('color.deprecated.surface.green100')};\n\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t}\n\n\t\t\t// pressed\n\t\t\t&:active:not([disabled]),\n\t\t\t&:focus:active:not([disabled]) {\n\t\t\t\tbackground-color: ${value('color.deprecated.green.200')};\n\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t}\n\n\t\t\t// focus\n\t\t\t&:focus-visible:not([disabled]) {\n\t\t\t\tbackground-color: ${value('color.deprecated.surface.green100')};\n\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t}\n\n\t\t\t// activated\n\t\t\t${modifier(\n\t\t\t\t'active',\n\t\t\t\tcss`\n\t\t\t\t\tbackground-color: ${value('color.deprecated.surface.green50')};\n\t\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t\t`,\n\t\t\t)}\n\t\t`,\n\t})}\n`;\n\nexport const Container = styled(Pressable)<IconButtonProps>`\n\tdisplay: inline-flex;\n\talign-items: center;\n\tbackground-color: transparent;\n\ttransition: background-color ${value('transition.default')}, color ${value('transition.default')};\n\tborder: 0;\n\tborder-radius: ${value('radius.m')};\n\ttext-decoration: none;\n\n\t${variantColorStyles}\n\n\t// disabled\n    &:disabled {\n\t\tcursor: not-allowed;\n\t\tcolor: ${value('color.text.disabled')};\n\n\t\t${modifier(\n\t\t\t'isLoading',\n\t\t\tcss`\n\t\t\t\tcolor: initial;\n\t\t\t\tcursor: auto;\n\t\t\t\t${variantColorStyles}\n\t\t\t`,\n\t\t)}\n\t}\n`;\n","import { css, excludeProps, styled, type StyledProps } from '@lokalise/styled';\n\nimport { color } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n\tcolor?: SvgIconColor;\n\tfill?: SvgIconColor;\n\tstroke?: SvgIconColor;\n\tsize?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n\tcolor: 'inherit',\n\tfill: 'currentColor',\n\tstroke: undefined,\n};\n\nconst colorHelper = (\n\tcolorType: keyof typeof colorTypesDefaults,\n\tinputColor: SvgIconColor | undefined,\n\tprops: StyledProps<unknown>,\n) =>\n\tinputColor && !reservedKeywords.includes(inputColor)\n\t\t? color(inputColor as NamedColor)(props)\n\t\t: colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n\tpointer-events: all;\n\tbox-sizing: border-box;\n\tcolor: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n\tfill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n\tstroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n\tfont-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n\twidth: 1em;\n\theight: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n"],"names":[],"sourceRoot":""}